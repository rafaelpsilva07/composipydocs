{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cf2e4299",
   "metadata": {},
   "source": [
    "# Converting Latex stacking sequence into NASTRAN PCOMP\n",
    "\n",
    "In this example we will convert the stacking sequences writed in Latex format into a PCOMP NASTRAN card.\n",
    "\n",
    "The following laminates are taken from table 12 of article [1].\n",
    "\n",
    "<br>\n",
    "\n",
    "panel_10 = $[\\pm45_{12}/90_4/0_2/(90_2/0_2)_5/(0_2/90_4)_2/0_4/90_2/0_2]s $\n",
    "\n",
    "panel_11 = $ [\\pm45_{15}/0_2/\\pm45/0_4/(90_4/0_2)_3/90_2]s $\n",
    "\n",
    "panel_12 = $[\\pm45_{12}/(0_2/90_4)_2/0_2/90_2]s$\n",
    "\n",
    "panel_13 = $[\\pm45_{12}/0_2/\\pm45/0_4/(90_4/0_2)_2/90_2]s$\n",
    "\n",
    "panel_14 = $[\\pm45_16/0_2/\\pm45/0_2/(0_2/90_4)_4/0_2/90_2]s$\n",
    "\n",
    "panel_15 = $[\\pm45_{11}/90_2/\\pm45_2/90_2/±45/90_2/(90_2/0_2)3/(0_2/90_2/0_2)_6]s$\n",
    "\n",
    "panel_16 = $[\\pm45_16/(90_2/\\pm45)2/(90_4/0_2)_3/(90_2/02)_2/(0_2/90_2/0_2)_3]s$\n",
    "\n",
    "panel_17 = $[\\pm45_{20}/0_2/\\pm45/0_4/(90_4/0_2)_3/90_2]s$\n",
    "\n",
    "panel_18 = $[\\pm45_{15}/0_4/(90_2/0_2)_2/90_4/0_2/90_2]s$\n",
    "\n",
    "## Reference\n",
    "\n",
    "[1] - Liu, B., Haftka, R. T., and Akgun, M. A., “Two-Level CompositeWing Structural Optimization Using Response Surface,” Structural and Multidisciplinary Optimization, Vol. 20, 2000, pp. 87–96. doi:10.1007/s001580050140"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c545efc",
   "metadata": {},
   "source": [
    "## Coding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d7a3d531",
   "metadata": {},
   "outputs": [],
   "source": [
    "from composipy.nastranapi import build_pcomp, build_sequence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "70d8ce1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Table 12 - Stacking sequences of upper skin panels for the adjusted design\n",
    "# These stackings are writen in Latex raw format.\n",
    "panel_10 = '[\\pm45_{12}/90_4/0_2/(90_2/0_2)_5/(0_2/90_4)_2/0_4/90_2/0_2]s'\n",
    "panel_11 = '[\\pm45_{15}/0_2/\\pm45/0_4/(90_4/0_2)_3/90_2]s'\n",
    "panel_12 = '[\\pm45_{12}/(0_2/90_4)_2/0_2/90_2]s'\n",
    "panel_13 = '[\\pm45_{12}/0_2/\\pm45/0_4/(90_4/0_2)_2/90_2]s'\n",
    "panel_14 = '[\\pm45_16/0_2/\\pm45/0_2/(0_2/90_4)_4/0_2/90_2]s'\n",
    "panel_15 = '[\\pm45_{11}/90_2/\\pm45_2/90_2/\\pm45/90_2/(90_2/0_2)3/(0_2/90_2/0_2)_6]s'\n",
    "panel_16 = '[\\pm45_16/(90_2/\\pm45)2/(90_4/0_2)_3/(90_2/02)_2/(0_2/90_2/0_2)_3]s'\n",
    "panel_17 = '[\\pm45_{20}/0_2/\\pm45/0_4/(90_4/0_2)_3/90_2]s'\n",
    "panel_18 = '[\\pm45_{15}/0_4/(90_2/0_2)_2/90_4/0_2/90_2]s'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "db7b3df7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We build a list with the Latex raw format (see build_sequence reference documentation)\n",
    "seq_panel_10 = build_sequence(panel_10)\n",
    "seq_panel_11 = build_sequence(panel_11)\n",
    "seq_panel_12 = build_sequence(panel_12)\n",
    "seq_panel_13 = build_sequence(panel_13)\n",
    "seq_panel_14 = build_sequence(panel_14)\n",
    "seq_panel_15 = build_sequence(panel_15)\n",
    "seq_panel_16 = build_sequence(panel_16)\n",
    "seq_panel_17 = build_sequence(panel_17)\n",
    "seq_panel_18 = build_sequence(panel_18)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d90db9d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Finally, we build the PCOMP NASTRAN cards. See the build_pcomp documentation for full information\n",
    "# build_pcomp function allows the user to build costum PCOMP cards.\n",
    "\n",
    "midi = 1\n",
    "ti = 0.127\n",
    "\n",
    "pcomp_panel_10 = build_pcomp(seq_panel_10, midi, ti, pid=10)\n",
    "pcomp_panel_11 = build_pcomp(seq_panel_11, midi, ti, pid=11)\n",
    "pcomp_panel_12 = build_pcomp(seq_panel_12, midi, ti, pid=12)\n",
    "pcomp_panel_13 = build_pcomp(seq_panel_13, midi, ti, pid=13)\n",
    "pcomp_panel_14 = build_pcomp(seq_panel_14, midi, ti, pid=14)\n",
    "pcomp_panel_15 = build_pcomp(seq_panel_15, midi, ti, pid=15)\n",
    "pcomp_panel_16 = build_pcomp(seq_panel_16, midi, ti, pid=16)\n",
    "pcomp_panel_17 = build_pcomp(seq_panel_17, midi, ti, pid=17)\n",
    "pcomp_panel_18 = build_pcomp(seq_panel_18, midi, ti, pid=18)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1a9d92da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PCOMP,18,,,,,,+\n",
      "+,1,0.127,45.0,YES,1,0.127,-45.0,NO+\n",
      "+,1,0.127,45.0,NO,1,0.127,-45.0,NO+\n",
      "+,1,0.127,45.0,NO,1,0.127,-45.0,NO+\n",
      "+,1,0.127,45.0,NO,1,0.127,-45.0,NO+\n",
      "+,1,0.127,45.0,NO,1,0.127,-45.0,NO+\n",
      "+,1,0.127,45.0,NO,1,0.127,-45.0,NO+\n",
      "+,1,0.127,45.0,NO,1,0.127,-45.0,NO+\n",
      "+,1,0.127,45.0,NO,1,0.127,0.0,NO+\n",
      "+,1,0.127,0.0,NO,1,0.127,0.0,NO+\n",
      "+,1,0.127,0.0,NO,1,0.127,90.0,NO+\n",
      "+,1,0.127,90.0,NO,1,0.127,0.0,NO+\n",
      "+,1,0.127,0.0,NO,1,0.127,90.0,NO+\n",
      "+,1,0.127,90.0,NO,1,0.127,0.0,NO+\n",
      "+,1,0.127,0.0,NO,1,0.127,90.0,NO+\n",
      "+,1,0.127,90.0,NO,1,0.127,90.0,NO+\n",
      "+,1,0.127,90.0,NO,1,0.127,0.0,NO+\n",
      "+,1,0.127,0.0,NO,1,0.127,90.0,NO+\n",
      "+,1,0.127,90.0,NO,1,0.127,90.0,NO+\n",
      "+,1,0.127,90.0,NO,1,0.127,0.0,NO+\n",
      "+,1,0.127,0.0,NO,1,0.127,90.0,NO+\n",
      "+,1,0.127,90.0,NO,1,0.127,90.0,NO+\n",
      "+,1,0.127,90.0,NO,1,0.127,0.0,NO+\n",
      "+,1,0.127,0.0,NO,1,0.127,90.0,NO+\n",
      "+,1,0.127,90.0,NO,1,0.127,0.0,NO+\n",
      "+,1,0.127,0.0,NO,1,0.127,90.0,NO+\n",
      "+,1,0.127,90.0,NO,1,0.127,0.0,NO+\n",
      "+,1,0.127,0.0,NO,1,0.127,0.0,NO+\n",
      "+,1,0.127,0.0,NO,1,0.127,45.0,NO+\n",
      "+,1,0.127,-45.0,NO,1,0.127,45.0,NO+\n",
      "+,1,0.127,-45.0,NO,1,0.127,45.0,NO+\n",
      "+,1,0.127,-45.0,NO,1,0.127,45.0,NO+\n",
      "+,1,0.127,-45.0,NO,1,0.127,45.0,NO+\n",
      "+,1,0.127,-45.0,NO,1,0.127,45.0,NO+\n",
      "+,1,0.127,-45.0,NO,1,0.127,45.0,NO+\n",
      "+,1,0.127,-45.0,NO,1,0.127,45.0,YES+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Then just copy and past to a .bdf file.\n",
    "# It really saves me a lot of time!!!\n",
    "\n",
    "print(pcomp_panel_18)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1456971e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
